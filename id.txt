
`include "defines.v"

module id(

	input wire										rst,
	input wire[`InstAddrBus]			pc_i,
	input wire[`InstBus]          inst_i,

  //处于执行阶段的指令的一些信息，用于解决load相关
  input wire[`AluOpBus]					ex_aluop_i,

	//处于执行阶段的指令要写入的目的寄存器信息
	input wire										ex_wreg_i,
	input wire[`RegBus]						ex_wdata_i,
	input wire[`RegAddrBus]       ex_wd_i,
	
	//处于访存阶段的指令要写入的目的寄存器信息
	input wire										mem_wreg_i,
	input wire[`RegBus]						mem_wdata_i,
	input wire[`RegAddrBus]       mem_wd_i,
	
	input wire[`RegBus]           reg1_data_i,
	input wire[`RegBus]           reg2_data_i,

	//如果上一条指令是转移指令，那么下一条指令在译码的时候is_in_delayslot为true
	input wire                    is_in_delayslot_i,

	//送到regfile的信息
	output reg                    reg1_read_o,
	output reg                    reg2_read_o,     
	output reg[`RegAddrBus]       reg1_addr_o,
	output reg[`RegAddrBus]       reg2_addr_o, 	      
	
	//送到执行阶段的信息
	output reg[11:0] immer,
	output reg[`AluOpBus]         aluop_o,
	output reg[`AluSelBus]        alusel_o,
	output reg[`RegBus]           reg1_o,
	output reg[`RegBus]           reg2_o,
	output reg[`RegAddrBus]       wd_o,
	output reg                    wreg_o,
	output wire[`RegBus]          inst_o,

	output reg                    next_inst_in_delayslot_o,
	
	output reg                    branch_flag_o,
	output reg[`RegBus]           branch_target_address_o,       
	output reg[`RegBus]           link_addr_o,
	output reg                    is_in_delayslot_o,
	
	output wire                   stallreq	
);

  wire[6:0] op1 = inst_i[6:0];
  wire[4:0] op2 = inst_i[11:7];
  wire[2:0] op3 = inst_i[14:12];
  wire[4:0] op4 = inst_i[19:15];
  wire[4:0] op5 = inst_i[24:20];
  wire[6:0] op6 = inst_i[31:25];
  
  reg[`RegBus]	imm;
  reg instvalid;
  wire[`RegBus] pc_plus_8;
  wire[`RegBus] pc_plus_4;
  wire[`RegBus] imm_sll2_signedext;  
  wire[`RegBus] imm_sll2_unsignedext;

  reg stallreq_for_reg1_loadrelate;
  reg stallreq_for_reg2_loadrelate;
  wire pre_inst_is_load;
  
  assign pc_plus_8 = pc_i + 8;
  assign pc_plus_4 = pc_i + 4;
  assign imm_sll2_signedext = {{20{inst_i[31]}}, inst_i[7],inst_i[30:25],inst_i[11:8],1'b0 };  
  assign imm_sll2_unsignedext = {20'b0, inst_i[7],inst_i[30:25],inst_i[11:8],1'b0 };  
  assign stallreq = stallreq_for_reg1_loadrelate | stallreq_for_reg2_loadrelate;
  assign pre_inst_is_load = ((ex_aluop_i == `EXE_LB_OP) || 
  													(ex_aluop_i == `EXE_LBU_OP)||
  													(ex_aluop_i == `EXE_LH_OP) ||
  													(ex_aluop_i == `EXE_LHU_OP)||
  													(ex_aluop_i == `EXE_LW_OP) ||
  													(ex_aluop_i == `EXE_LWR_OP)||
  													(ex_aluop_i == `EXE_LWL_OP)||
  													(ex_aluop_i == `EXE_LL_OP) ||
  													(ex_aluop_i == `EXE_SC_OP)) ? 1'b1 : 1'b0;

  assign inst_o = inst_i;
    

	always @ (*) begin	
		if (rst == `RstEnable) begin
			aluop_o <= `EXE_NOP_OP;
			alusel_o <= `EXE_RES_NOP;
			wd_o <= `NOPRegAddr;
			wreg_o <= `WriteDisable;
			instvalid <= `InstValid;
			reg1_read_o <= 1'b0;
			reg2_read_o <= 1'b0;
			reg1_addr_o <= `NOPRegAddr;
			reg2_addr_o <= `NOPRegAddr;
			imm <= 32'h0;	
			link_addr_o <= `ZeroWord;
			branch_target_address_o <= `ZeroWord;
			branch_flag_o <= `NotBranch;
			next_inst_in_delayslot_o <= `NotInDelaySlot;					
	  end else begin
			aluop_o <= `EXE_NOP_OP;
			alusel_o <= `EXE_RES_NOP;
			wd_o <= inst_i[11:7];
			wreg_o <= `WriteDisable;
			instvalid <= `InstInvalid;	   
			reg1_read_o <= 1'b0;
			reg2_read_o <= 1'b0;
			reg1_addr_o <= inst_i[19:15];
			reg2_addr_o <= inst_i[24:20];		
			imm <= `ZeroWord;
			link_addr_o <= `ZeroWord;
			branch_target_address_o <= `ZeroWord;
			branch_flag_o <= `NotBranch;	
			next_inst_in_delayslot_o <= `NotInDelaySlot; 			
		    case (op1)
		          `OP_OP: begin
		                  case (op3)
		    				`FUNCT3_OR:	begin
		    					wreg_o <= `WriteEnable;		aluop_o <= `EXE_OR_OP;
		  						alusel_o <= `EXE_RES_LOGIC; 	reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;
		  						instvalid <= `InstValid;	
								end  
		    				`FUNCT3_AND:	begin
		    					wreg_o <= `WriteEnable;		aluop_o <= `EXE_AND_OP;
		  						alusel_o <= `EXE_RES_LOGIC;	  reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;	
		  						instvalid <= `InstValid;	
								end  	
		    				`FUNCT3_XOR:	begin
		    					wreg_o <= `WriteEnable;		aluop_o <= `EXE_XOR_OP;
		  						alusel_o <= `EXE_RES_LOGIC;		reg1_read_o <= 1'b1;	reg2_read_o <= 1'b1;	
		  						instvalid <= `InstValid;	
								end  				
							`FUNCT3_SLT: begin
                                wreg_o <= `WriteEnable;        aluop_o <= `EXE_SLT_OP;
                                alusel_o <= `EXE_RES_ARITHMETIC;        reg1_read_o <= 1'b1;    reg2_read_o <= 1'b1;
                                instvalid <= `InstValid;    
                                end
                             `FUNCT3_SLTU: begin
                                  wreg_o <= `WriteEnable;        aluop_o <= `EXE_SLTU_OP;
                                  alusel_o <= `EXE_RES_ARITHMETIC;        reg1_read_o <= 1'b1;    reg2_read_o <= 1'b1;
                                  instvalid <= `InstValid;    
                                  end
                              `FUNCT3_SLL: begin
                                  wreg_o <= `WriteEnable;		aluop_o <= `EXE_SLL_OP;
                                  alusel_o <= `EXE_RES_SHIFT;        reg1_read_o <= 1'b1;    reg2_read_o <= 1'b1;
                                  instvalid <= `InstValid;    
                                     end 
                               `FUNCT3_SRL_SRA :
                                    if (op6 == 7'b0000000) begin
                                  wreg_o <= `WriteEnable;		aluop_o <= `EXE_SRL_OP;
                                  alusel_o <= `EXE_RES_SHIFT;        reg1_read_o <= 1'b1;    reg2_read_o <= 1'b1;
                                  instvalid <= `InstValid;  
                                   end  else
                                   begin
                                                    	wreg_o <= `WriteEnable;		aluop_o <= `EXE_SRA_OP;
                                                        alusel_o <= `EXE_RES_SHIFT;        reg1_read_o <= 1'b1;    reg2_read_o <= 1'b1;
                                                        instvalid <= `InstValid;      
                                                  end
                             `FUNCT3_ADD_SUB: 
                                     if (op6 == 7'b0000000) 
                                     begin
                                     wreg_o <= `WriteEnable;        aluop_o <= `EXE_ADD_OP;
                                     alusel_o <= `EXE_RES_ARITHMETIC;        reg1_read_o <= 1'b1;    reg2_read_o <= 1'b1;
                                     instvalid <= `InstValid;    
                                 end else
                                  begin
                                     wreg_o <= `WriteEnable;        aluop_o <= `EXE_SUB_OP;
                                      alusel_o <= `EXE_RES_ARITHMETIC;        reg1_read_o <= 1'b1;    reg2_read_o <= 1'b1;
                                      instvalid <= `InstValid;    
                                       end
							default begin
								end
						endcase
				end
						 `OP_OP_IMM: 
						         case (op3)
								  					    							  
                                `FUNCT3_ORI:            begin                        //ORI指令
                                        wreg_o <= `WriteEnable;        aluop_o <= `EXE_OR_OP;
                                        alusel_o <= `EXE_RES_LOGIC; reg1_read_o <= 1'b1;    reg2_read_o <= 1'b0;          
                                        imm <= {{20{inst_i[31]}} , inst_i[31:20]};        wd_o <= inst_i[11:7]; 
                                        instvalid <= `InstValid;    
                                        end
                                `FUNCT3_ANDI :            begin
                                        wreg_o <= `WriteEnable;        aluop_o <= `EXE_AND_OP;
                                        alusel_o <= `EXE_RES_LOGIC;    reg1_read_o <= 1'b1;    reg2_read_o <= 1'b0;          
                                        imm <= {{20{inst_i[31]}} , inst_i[31:20]};       wd_o <= inst_i[11:7];              
                                        instvalid <= `InstValid;    
                                        end         
                                `FUNCT3_XORI:            begin
                                        wreg_o <= `WriteEnable;        aluop_o <= `EXE_XOR_OP;
                                        alusel_o <= `EXE_RES_LOGIC;    reg1_read_o <= 1'b1;    reg2_read_o <= 1'b0;          
                                        imm <= {{20{inst_i[31]}} , inst_i[31:20]};        wd_o <= inst_i[11:7];             
                                        instvalid <= `InstValid;    
                                        end             
                                      
                                `FUNCT3_SLTI:            begin
                                        wreg_o <= `WriteEnable;        aluop_o <= `EXE_SLT_OP;
                                        alusel_o <= `EXE_RES_ARITHMETIC; reg1_read_o <= 1'b1;    reg2_read_o <= 1'b0;          
                                        imm <= {{20{inst_i[31]}} , inst_i[31:20]};         wd_o <= inst_i[11:7];              
                                        instvalid <= `InstValid;    
                                        end
                                `FUNCT3_SLTIU:            begin
                                        wreg_o <= `WriteEnable;        aluop_o <= `EXE_SLTU_OP;
                                        alusel_o <= `EXE_RES_ARITHMETIC; reg1_read_o <= 1'b1;    reg2_read_o <= 1'b0;          
                                        imm <= {21'b0 , inst_i[30:20]};         wd_o <= inst_i[11:7];              
                                        instvalid <= `InstValid;    
                                        end                      
                                `FUNCT3_ADDI:            begin
                                        wreg_o <= `WriteEnable;        aluop_o <= `EXE_ADDI_OP;
                                        alusel_o <= `EXE_RES_ARITHMETIC; reg1_read_o <= 1'b1;    reg2_read_o <= 1'b0;          
                                        imm <= {{20{inst_i[31]}} , inst_i[31:20]};       wd_o <= inst_i[11:7];              
                                        instvalid <= `InstValid;    
                                        end
                                 `FUNCT3_SLLI : begin
                                        wreg_o <= `WriteEnable;		aluop_o <= `EXE_SLL_OP;
                                        alusel_o <= `EXE_RES_SHIFT; reg1_read_o <= 1'b1;    reg2_read_o <= 1'b0;          
                                        imm[4:0] <= {27'b000000000000000000000000000,inst_i[24:20]};        wd_o <= inst_i[11:7];
                                        instvalid <= `InstValid;      
                                        end 
                                 `FUNCT3_SRLI_SRAI: 

